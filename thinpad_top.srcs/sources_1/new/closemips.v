`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company:
// Engineer:
//
// Create Date: 10/26/2018 06:05:08 AM
// Design Name:
// Module Name: test_id_ex
// Project Name:
// Target Devices:
// Tool Versions:
// Description:
//
// Dependencies:
//
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
//
//////////////////////////////////////////////////////////////////////////////////

`include "defines.v"
module closemips(
	input wire clk,
	input wire rst,
	input wire[`RegBus] rom_data_i,

    input wire[`RegBus] mem_data_i,
    input wire mem_pause_pipeline_i,


	output wire[`RegBus] rom_addr_o,
	output wire rom_ce_o,

    output wire[`RegBus] mem_addr_o,
    output wire[`MEMCONTROL_OP_LEN - 1:0] mem_op_o,
    output wire[5:0] mem_data_sz_o,
    output wire[`RegBus] mem_data_o,
    output wire mem_enabled,
    
    output wire[`RegBus] cnt_correct_instruction
);

wire[`RegBus] pc;//pc is generated by PC
// reg[`RegBus] inst;
// fake instruction from ROM
// reg[31:0] rom_data_i;
// IF_ID to ID
wire [31:0]id_pc;
wire [31:0]id_inst;
// Return value to ID from RegFile
wire[`RegBus] reg1;
wire[`RegBus] reg2;

// ID request to RegFile
wire reg1_read;
wire reg2_read;
wire[`RegAddrBus] reg1_addr;
wire[`RegAddrBus] reg2_addr;
// ID write to RegFile
wire[`RegAddrBus] wd;
wire wreg;

wire[`AluOpBus] aluop;
wire[`AluSelBus] alusel;
wire[`RegBus] reg1_o;
wire[`RegBus] reg2_o;

wire[`AluOpBus] ex_aluop;
wire[`AluSelBus] ex_alusel;
wire[`RegBus] ex_reg1;
wire[`RegBus] ex_reg2;
wire[`RegAddrBus] ex_wd;
wire ex_wreg;

wire[`RegBus] hi;
wire[`RegBus] lo;

wire[`RegBus] wb_hi;
wire[`RegBus] wb_lo;
wire wb_whilo;

wire[`RegBus] mem_hi;
wire[`RegBus] mem_lo;
wire mem_whilo;

wire[`RegAddrBus] wd_o;
wire wreg_o;
wire[`RegBus] wdata_o;

wire[`RegBus] ex_hi_o;
wire[`RegBus] ex_lo_o;
wire ex_whilo_o;

wire[`RegAddrBus] mem_wd;
wire mem_wreg;
wire[`RegBus] mem_wdata;

// EX_MEM output
wire ex_mem_wreg_o;
wire [4:0]ex_mem_wd_o;
wire [31:0]ex_mem_wdata_o;

// MEM output
wire [4:0]mem_wd_o;
wire [31:0]mem_wdata_o;
wire mem_wreg_o;
// MEM_WB output
wire mem_wb_wreg_o;
wire [4:0]mem_wb_wd_o;
wire [31:0]mem_wb_wdata_o;

//HILO
wire[`RegBus] mem_hi_o;
wire[`RegBus] mem_lo_o;
wire mem_whilo_o;

//Stall singal from CTRL
wire [`StallBus] stall_ctrl_o;
wire stallreq_id_o;
wire stallreq_ex_o;
wire stallreq_mem_o;

//DIV
wire signed_div_ex_o;
wire [`RegBus] div_op1_ex_o;
wire [`RegBus] div_op2_ex_o;
wire start_ex_o;
wire annul_ex_o;
wire [`DoubleRegBus] result_div_o;
wire ready_div_o;

//jump and branch
wire id_branch_flag_o;
wire[`RegBus] branch_target_address;
wire is_in_delayslot_i;
wire is_in_delayslot_o;
wire next_inst_in_delayslot_o;
wire id_is_in_delayslot_o;
wire[`RegBus] id_link_address_o;	
wire ex_is_in_delayslot_i;	
wire[`RegBus] ex_link_address_i;

//load and store
wire[`RegBus] id_inst_o;
wire[`RegBus] ex_inst_i;
wire[`AluOpBus] ex_aluop_o;
wire[`RegBus] ex_mem_addr_o;
wire[`RegBus] ex_reg2_o;
wire[`AluOpBus] mem_aluop_i;
wire[`RegBus] mem_mem_addr_i;
wire[`RegBus] mem_reg2_i;	

wire[4:0] cp0_read_addr_i;
wire cp0_read_enabled;
wire[`RegBus] cp0_read_result;

wire[4:0] cp0_write_addr_i;
wire cp0_write_enabled;
wire[`RegBus] cp0_write_data;


wire ex_o_cp0_reg_we_o;
wire[4:0] ex_o_cp0_reg_write_addr_o;
wire[`RegBus] ex_o_cp0_reg_data_o;

wire ex_mem_o_cp0_reg_we_o;
wire[4:0] ex_mem_o_cp0_reg_write_addr_o;
wire[`RegBus] ex_mem_o_cp0_reg_data_o;

wire mem_o_cp0_reg_we_o;
wire[4:0] mem_o_cp0_reg_write_addr_o;
wire[`RegBus] mem_o_cp0_reg_data_o;

wire mem_wb_o_cp0_reg_we_o;
wire[4:0] mem_wb_o_cp0_reg_write_addr_o;
wire[`RegBus] mem_wb_o_cp0_reg_data_o;


// exception 
wire flush;
wire recovery;
wire[`RegBus] n_pc;

wire[`RegBus] id_excp_type_o;
wire[`RegBus] id_excp_inst_addr_o;

wire[`RegBus] id_ex_excp_type_o;
wire[`RegBus] id_ex_excp_inst_addr_o;

wire[`RegBus] ex_excp_type_o;
wire[`RegBus] ex_excp_inst_addr_o;
wire ex_excp_in_delay_slot_o;

wire[`RegBus] ex_mem_excp_type_o;
wire[`RegBus] ex_mem_excp_inst_addr_o;
wire ex_mem_excp_in_delay_slot_o;

wire[`RegBus] mem_excp_type_o;
wire[`RegBus] mem_excp_inst_addr_o;
wire mem_excp_in_delay_slot_o;
wire[`RegBus] mem_excp_bad_addr;

wire[`RegBus] cp0_status_i;
wire[`RegBus] cp0_cause_i;
wire[`RegBus] cp0_epc_i;
wire[`RegBus] cp0_ebase_i;


CP0 cp0(
    .clk(clk),
    .rst(rst),

    .read_addr_i(cp0_read_addr_i),
    .read_enabled(cp0_read_enabled),
    .read_data_o(cp0_read_result),

    .write_addr_i(mem_wb_o_cp0_reg_write_addr_o),
    .write_data_i(mem_wb_o_cp0_reg_data_o),
    .write_enabled(mem_wb_o_cp0_reg_we_o),
  
    .cp0_status_o(cp0_status_i),
    .cp0_cause_o(cp0_cause_i),
    .cp0_epc_o(cp0_epc_i),
    .cp0_ebase_o(cp0_ebase_i),

    .excp_type_i(mem_excp_type_o),
    .excp_inst_addr_i(mem_excp_inst_addr_o), 
    .excp_in_delay_slot_i(mem_excp_in_delay_slot_o),
    .excp_bad_addr(mem_excp_bad_addr)
);


PC Pc(
    .rst_i(rst), 
    .clk_i(clk),
    .stall_i(stall_ctrl_o),
    .branch_flag_i(id_branch_flag_o), 
    .branch_target_address_i(branch_target_address),
    .flush(flush),
    .ex_pc(n_pc),
    .pc_o(pc), 
    .ce_o(rom_ce_o) 
);
assign rom_addr_o = pc;


IF_ID If_id(
    .rst_i(rst), .clk_i(clk), .if_pc_i(pc), .if_inst_i(rom_data_i), .stall_i(stall_ctrl_o),
    .id_pc_o(id_pc) , .id_inst_o(id_inst), .flush(flush)
);

id id0 (
    .rst(rst),
    .pc_i(id_pc),
    .inst_i(id_inst),
    .reg1_data_i(reg1),
    .reg2_data_i(reg2),
    .ex_wdata_i(wdata_o),
    .ex_wd_i(wd_o),
    .ex_wreg_i(wreg_o),
    .mem_wdata_i(mem_wdata_o),
    .mem_wd_i(mem_wd_o),
    .mem_wreg_i(mem_wreg_o),
    .is_in_delayslot_i(is_in_delayslot_i),
    .ex_aluop_i(ex_aluop_o),

    .reg1_read_o(reg1_read),
    .reg2_read_o(reg2_read),
    .reg1_addr_o(reg1_addr),
    .reg2_addr_o(reg2_addr),
    .aluop_o(aluop),
    .alusel_o(alusel),
    .reg1_o(reg1_o),
    .reg2_o(reg2_o),
    .wd_o(wd),
    .wreg_o(wreg),
    .stallreq_o(stallreq_id_o),
    .next_inst_in_delayslot_o(next_inst_in_delayslot_o),	
    .branch_flag_o(id_branch_flag_o),
    .branch_target_address_o(branch_target_address),       
    .link_addr_o(id_link_address_o),
    .is_in_delayslot_o(id_is_in_delayslot_o),
    .inst_o(id_inst_o),

    .excp_type_o(id_excp_type_o),
    .excp_inst_addr_o(id_excp_inst_addr_o)
);

id_ex id_ex0(
    .rst(rst),
    .clk(clk),
    .id_aluop(aluop),
    .id_alusel(alusel),
    .id_reg1(reg1_o),
    .id_reg2(reg2_o),
    .id_wd(wd),
    .id_wreg(wreg),
    .id_link_address(id_link_address_o),
	.id_is_in_delayslot(id_is_in_delayslot_o),
	.next_inst_in_delayslot_i(next_inst_in_delayslot_o),
    .stall_i(stall_ctrl_o),
    .id_inst(id_inst_o),	

    .ex_aluop(ex_aluop),
    .ex_alusel(ex_alusel),
    .ex_reg1(ex_reg1),
    .ex_reg2(ex_reg2),
    .ex_wd(ex_wd),
    .ex_wreg(ex_wreg),
    .ex_link_address(ex_link_address_i),
  	.ex_is_in_delayslot(ex_is_in_delayslot_i),
	.is_in_delayslot_o(is_in_delayslot_i),
    .ex_inst(ex_inst_i),

    .flush(flush),
    .excp_type_i(id_excp_type_o), 
    .excp_inst_addr_i(id_excp_inst_addr_o),
    .excp_type_o(id_ex_excp_type_o), 
    .excp_inst_addr_o(id_ex_excp_inst_addr_o)
      
);

ex ex_0(
    .rst(rst),
    .aluop_i(ex_aluop),
    .alusel_i(ex_alusel),
    .reg1_i(ex_reg1),
    .reg2_i(ex_reg2),
    .wd_i(ex_wd),
    .wreg_i(ex_wreg),
    .hi_i(hi),
    .lo_i(lo),
    .wb_hi_i(wb_hi),
    .wb_lo_i(wb_lo),
    .wb_whilo_i(wb_whilo),
    .mem_hi_i(mem_hi),
    .mem_lo_i(mem_lo),
    .mem_whilo_i(mem_whilo),
    .div_result_i(result_div_o),
    .div_ready_i(ready_div_o),
    .link_address_i(ex_link_address_i),
	.is_in_delayslot_i(ex_is_in_delayslot_i),	
    .inst_i(ex_inst_i),
    
    .wd_o(wd_o),
    .wreg_o(wreg_o),
    .wdata_o(wdata_o),
    .hi_o(ex_hi_o),
    .lo_o(ex_lo_o),
    .whilo_o(ex_whilo_o),
    .stallreq_o(stallreq_ex_o),
    .signed_div_o(signed_div_ex_o),
    .div_op1_o(div_op1_ex_o),
    .div_op2_o(div_op2_ex_o),
    .div_start_o(start_ex_o),
    .aluop_o(ex_aluop_o),
    .mem_addr_o(ex_mem_addr_o),
    .reg2_o(ex_reg2_o), 

    .cp0_reg_data_i(cp0_read_result), 
    .mem_cp0_reg_we(mem_o_cp0_reg_we_o),
    .mem_cp0_reg_write_addr(mem_o_cp0_reg_write_addr_o),
    .mem_cp0_reg_data(mem_o_cp0_reg_data_o),
    .wb_cp0_reg_we(mem_wb_o_cp0_reg_we_o),
    .wb_cp0_reg_write_addr(mem_wb_o_cp0_reg_write_addr_o),
    .wb_cp0_reg_data(mem_wb_o_cp0_reg_data_o),

    .cp0_reg_we_o(ex_o_cp0_reg_we_o),
    .cp0_reg_write_addr_o(ex_o_cp0_reg_write_addr_o),
    .cp0_reg_data_o(ex_o_cp0_reg_data_o),
    .cp0_reg_read_enabled(cp0_read_enabled),
    .cp0_reg_read_addr_o(cp0_read_addr_i),

    .excp_type_i(id_ex_excp_type_o),
    .excp_inst_addr_i(id_ex_excp_inst_addr_o),
    .excp_type_o(ex_excp_type_o),
    .excp_inst_addr_o(ex_excp_inst_addr_o),
    .excp_in_delay_slot_o(ex_excp_in_delay_slot_o)


);

ex_mem ex_mem0(
    .clk(clk),
    .rst(rst),
    .ex_wd(wd_o),
    .ex_wreg(wreg_o),
    .ex_wdata(wdata_o),
    .ex_hi(ex_hi_o),
    .ex_lo(ex_lo_o),
    .ex_whilo(ex_whilo_o),
    .stall_i(stall_ctrl_o),
    .ex_aluop(ex_aluop_o),
    .ex_mem_addr(ex_mem_addr_o),
    .ex_reg2(ex_reg2_o),
    .mem_wd(ex_mem_wd_o),
    .mem_wreg(ex_mem_wreg_o),
    .mem_wdata(ex_mem_wdata_o),
    .mem_hi(mem_hi),
    .mem_lo(mem_lo),
    .mem_whilo(mem_whilo),
    .mem_aluop(mem_aluop_i),
	.mem_mem_addr(mem_mem_addr_i),
	.mem_reg2(mem_reg2_i),

    .cp0_reg_we_i(ex_o_cp0_reg_we_o),
    .cp0_reg_write_addr_i(ex_o_cp0_reg_write_addr_o),
    .cp0_reg_data_i(ex_o_cp0_reg_data_o),
    .cp0_reg_we_o(ex_mem_o_cp0_reg_we_o),
    .cp0_reg_write_addr_o(ex_mem_o_cp0_reg_write_addr_o),
    .cp0_reg_data_o(ex_mem_o_cp0_reg_data_o),

    .flush(flush),
    .excp_type_i(ex_excp_type_o),
    .excp_inst_addr_i(ex_excp_inst_addr_o),
    .excp_in_delay_slot_i(ex_excp_in_delay_slot_o),
    .excp_type_o(ex_mem_excp_type_o),
    .excp_inst_addr_o(ex_mem_excp_inst_addr_o),
    .excp_in_delay_slot_o(ex_mem_excp_in_delay_slot_o)

);
// 交接
MEM mem0(
    .clk_i(clk),
    .rst_i(rst),
    .wd_i(ex_mem_wd_o),
    .wreg_i(ex_mem_wreg_o),
    .wdata_i(ex_mem_wdata_o),
    .hi_i(mem_hi),
    .lo_i(mem_lo),
    .whilo_i(mem_whilo),
    .aluop_i(mem_aluop_i),
    .mem_addr_i(mem_mem_addr_i),
    .reg2_i(mem_reg2_i),
    .mem_data_i(mem_data_i),
    .mem_pause_pipeline_i(mem_pause_pipeline_i),
    .wd_o(mem_wd_o),
    .wreg_o(mem_wreg_o),
    .wdata_o(mem_wdata_o),
    .hi_o(mem_hi_o),
    .lo_o(mem_lo_o),
    .whilo_o(mem_whilo_o),
    .mem_addr_o(mem_addr_o),
    .mem_op_o(mem_op_o),
    .mem_data_o(mem_data_o),
    .mem_data_sz_o(mem_data_sz_o),
    .mem_enabled(mem_enabled),
    .stallreq_o(stallreq_mem_o),

    .cp0_reg_we_i(ex_mem_o_cp0_reg_we_o),
    .cp0_reg_write_addr_i(ex_mem_o_cp0_reg_write_addr_o),
    .cp0_reg_data_i(ex_mem_o_cp0_reg_data_o),
    .cp0_reg_we_o(mem_o_cp0_reg_we_o),
    .cp0_reg_write_addr_o(mem_o_cp0_reg_write_addr_o),
    .cp0_reg_data_o(mem_o_cp0_reg_data_o),

    .excp_type_i(ex_mem_excp_type_o),
    .excp_inst_addr_i(ex_mem_excp_inst_addr_o),
    .excp_in_delay_slot_i(ex_mem_excp_in_delay_slot_o),
    .excp_type_o(mem_excp_type_o),
    .excp_inst_addr_o(mem_excp_inst_addr_o),
    .excp_in_delay_slot_o(mem_excp_in_delay_slot_o),
    .excp_bad_addr(mem_excp_bad_addr),

    .cp0_status_i(cp0_status_i),
    .cp0_cause_i(cp0_cause_i),
    .cp0_epc_i(cp0_epc_i)
);

MEM_WB Mem_wb(
    .rst(rst),
    .clk(clk),
    .mem_wd_i(mem_wd_o),
    .mem_wreg_i(mem_wreg_o),
    .mem_wdata_i(mem_wdata_o),
    .mem_hi(mem_hi_o),
    .mem_lo(mem_lo_o),
    .mem_whilo(mem_whilo_o),
    .stall_i(stall_ctrl_o),
    .wb_wd_o(mem_wb_wd_o),
    .wb_wreg_o(mem_wb_wreg_o),
    .wb_wdata_o(mem_wb_wdata_o),
    .wb_hi(wb_hi),
    .wb_lo(wb_lo),
    .wb_whilo(wb_whilo),
    .cp0_reg_we_i(mem_o_cp0_reg_we_o),
    .cp0_reg_write_addr_i(mem_o_cp0_reg_write_addr_o),
    .cp0_reg_data_i(mem_o_cp0_reg_data_o),
    .cp0_reg_we_o(mem_wb_o_cp0_reg_we_o),
    .cp0_reg_write_addr_o(mem_wb_o_cp0_reg_write_addr_o),
    .cp0_reg_data_o(mem_wb_o_cp0_reg_data_o)
);

hilo hilo0(
    .clk(clk),
    .rst(rst),
    .writeEnable_i(wb_whilo),
    .writeHi_i(wb_hi),
    .writeLo_i(wb_lo),
    .dataHi_o(hi),
    .dataLo_o(lo)
);

RegisterFile regisetrfile0(
    .clk(clk),
    .rst(rst),
    .read_addr_1(reg1_addr),
    .read_enable_1(reg1_read),
    .read_addr_2(reg2_addr),
    .read_enable_2(reg2_read),
    .write_addr(mem_wb_wd_o),
    .write_enable(mem_wb_wreg_o),
    .write_data(mem_wb_wdata_o),

    .result1(reg1),
    .result2(reg2),

    .flush(flush),
    .recovery(recovery),

    .cnt_correct_instruction(cnt_correct_instruction)
);

CTRL Ctrl(
    .rst_i(rst),
    .stall_from_id_i(stallreq_id_o),
    .stall_from_ex_i(stallreq_ex_o),
    .stall_from_mem_i(stallreq_mem_o),
    .stall_o(stall_ctrl_o),

    .excp_type_i(mem_excp_type_o),
    .cp0_ebase_i(cp0_ebase_i),
    .cp0_epc_i(cp0_epc_i),
    .flush(flush),
    .recovery(recovery),
    .new_pc(n_pc)
);

DIV div(
    .clk_i(clk),
    .rst_i(rst),
    .signed_div_i(signed_div_ex_o),
    .op1_i(div_op1_ex_o),
    .op2_i(div_op2_ex_o),
    .start_i(start_ex_o),
    // No annul at present
    .annul_i(1'b0),
    //.annul_i(annul_ex_o),
    
    .result_o(result_div_o),
    .ready_o(ready_div_o)
);




endmodule
